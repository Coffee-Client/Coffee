/*
 * Copyright (c) 2022 Coffee Client, 0x150 and contributors.
 * Some rights reserved, refer to LICENSE file.
 */

package coffee.client.feature.command.impl;

import coffee.client.CoffeeMain;
import coffee.client.feature.command.Command;
import coffee.client.feature.command.coloring.ArgumentType;
import coffee.client.feature.command.coloring.PossibleArgument;
import coffee.client.feature.command.exception.CommandException;
import coffee.client.feature.items.Item;
import coffee.client.feature.items.ItemRegistry;
import coffee.client.feature.items.Option;
import coffee.client.helper.util.Utils;
import joptsimple.OptionParser;
import joptsimple.OptionSet;
import net.minecraft.item.ItemStack;

import javax.management.ReflectionException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

public class ItemExploit extends Command {
    public ItemExploit() {
        super("ItemExploit", "Spawns an item exploit in creative", "itemExploit");
    }

    @Override
    public ExamplesEntry getExampleArguments() {
        return new ExamplesEntry("Nuke --tntFuse 60", "Plague --durationSeconds 10 --spreadRadius 0.1");
    }

    @Override
    public PossibleArgument getSuggestionsWithType(int index, String[] args) {
        if (index == 0) {
            return new PossibleArgument(ArgumentType.STRING, ItemRegistry.instance.getItems().stream().map(Item::getName).toList().toArray(String[]::new));
        } else {
            String eName = args[0];
            Item meant = null;
            for (Item item : ItemRegistry.instance.getItems()) {
                if (item.getName().equalsIgnoreCase(eName)) {
                    meant = item;
                    break;
                }
            }
            if (meant == null || meant.getOptions().length == 0) {
                return super.getSuggestionsWithType(index, args);
            }
            List<String> alreadyFilledOut = new ArrayList<>(Arrays.asList(Arrays.copyOfRange(args, 1, args.length)));
            return new PossibleArgument(ArgumentType.STRING,
                Arrays.stream(meant.getOptions())
                    .map(option -> "--" + option.getName())
                    .filter(s -> alreadyFilledOut.stream().noneMatch(s1 -> s1.equalsIgnoreCase(s)))
                    .toList()
                    .toArray(String[]::new));
        }
    }

    @Override
    public void onExecute(String[] args) throws CommandException {
        validateArgumentsLength(args, 1, "Provide exploit name");
        if (!CoffeeMain.client.interactionManager.hasCreativeInventory()) {
            throw new CommandException("No creative inventory, can't generate");
        }
        String n = args[0].toLowerCase();
        Item meant = null;
        for (Item item : ItemRegistry.instance.getItems()) {
            if (item.getName().equalsIgnoreCase(n)) {
                meant = item;
                break;
            }
        }
        if (meant == null) {
            throw new CommandException("Didn't find exploit \"" + args[0] + "\"");
        }
        if (meant.getOptions().length != 0) {
            String[] pArgs = Arrays.copyOfRange(args, 1, args.length);
            List<String> argsWhitespaced = new ArrayList<>();
            StringBuilder argStack = new StringBuilder();
            boolean inString = false;
            for (String pArg : pArgs) {
                for (char c : pArg.toCharArray()) {
                    if (c == '"') {
                        inString = !inString;
                    } else {
                        argStack.append(c);
                    }
                }
                argStack.append(" ");
                if (!inString) {
                    argsWhitespaced.add(argStack.toString().trim());
                    argStack = new StringBuilder();
                }
            }
            if (!argStack.isEmpty()) {
                argsWhitespaced.add(argStack.toString().trim());
            }
            OptionParser opt = new OptionParser(true);
            opt.allowsUnrecognizedOptions();
            for (Option<?> option : meant.getOptions()) {
                if (option.getType() == Boolean.class) {
                    opt.accepts(option.getName());
                } else {
                    opt.accepts(option.getName()).withRequiredArg().ofType(option.getType());
                }
            }
            OptionSet os;
            try {
                os = opt.parse(argsWhitespaced.toArray(String[]::new));
            } catch (Exception e) {
                error(e.getMessage());
                return;
            }
            for (Option<?> option : meant.getOptions()) {
                Object val;
                try {
                    if (option.getType() == Boolean.class) {
                        val = os.has(option.getName());
                    } else {
                        val = os.valueOf(option.getName());
                    }
                } catch (Exception e) {
                    if (e.getCause() instanceof ReflectionException) {
                        error("Type of option " + option.getName() + " is invalid, should be " + option.getType().getSimpleName());
                        return;
                    } else {
                        throw e;
                    }
                }
                if (val == null) {
                    if (option.getStandardValueNullIfNothing() == null) {
                        error("Not all options filled: " + option.getName() + " unset");
                        return;
                    } else {
                        val = option.getStandardValueNullIfNothing();
                    }

                }
                option.accept(val);
            }
        }

        ItemStack is = meant.generate();
        if (is != null) {
            // I HATE MULTICONNECT I HATE MULTICONNECT I HATE MULTICONNECT I HATE MULTICONNECT I HATE MULTICONNECT I HATE MULTICONNECT I HATE MULTICONNECT I HATE MULTICONNECT
            CoffeeMain.client.interactionManager.clickCreativeStack(is, Utils.Inventory.slotIndexToId(CoffeeMain.client.player.getInventory().selectedSlot));
        }

    }
}
