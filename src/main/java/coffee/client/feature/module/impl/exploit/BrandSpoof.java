/*
 * Copyright (c) 2022 Coffee Client, 0x150 and contributors.
 * Some rights reserved, refer to LICENSE file.
 */

package coffee.client.feature.module.impl.exploit;

import coffee.client.feature.config.StringSetting;
import coffee.client.feature.module.Module;
import coffee.client.feature.module.ModuleType;
import coffee.client.helper.event.EventType;
import coffee.client.helper.event.Events;
import coffee.client.helper.event.events.PacketEvent;
import coffee.client.mixin.network.ICustomPayloadC2SPacketMixin;
import io.netty.buffer.Unpooled;
import net.minecraft.client.util.math.MatrixStack;
import net.minecraft.network.PacketByteBuf;
import net.minecraft.network.packet.c2s.play.CustomPayloadC2SPacket;

import java.nio.charset.StandardCharsets;

public class BrandSpoof extends Module {

    final StringSetting brand = this.config.create(new StringSetting.Builder("vanilla").name("Brand").description("What brand to spoof the client to").get());

    public BrandSpoof() {
        super("BrandSpoof", "Tells the server you're on a different client brand", ModuleType.EXPLOIT);
        Events.registerEventHandler(EventType.PACKET_SEND, event1 -> {
            if (!this.isEnabled()) {
                return;
            }
            PacketEvent event = (PacketEvent) event1;
            if (event.getPacket() instanceof CustomPayloadC2SPacket packet) {
                ICustomPayloadC2SPacketMixin accessor = (ICustomPayloadC2SPacketMixin) packet;
                if (accessor.getChannel().equals(CustomPayloadC2SPacket.BRAND)) {
                    accessor.setData(new PacketByteBuf(Unpooled.buffer()).writeString(brand.getValue()));
                } else if (accessor.getData().toString(StandardCharsets.UTF_8).toLowerCase().contains("fabric")) {
                    event.setCancelled(true);
                }
            }
        }, 0);
    }

    @Override
    public void tick() {

    }

    @Override
    public void enable() {

    }

    @Override
    public void disable() {

    }

    @Override
    public String getContext() {
        return null;
    }

    @Override
    public void onWorldRender(MatrixStack matrices) {

    }

    @Override
    public void onHudRender() {

    }
}
