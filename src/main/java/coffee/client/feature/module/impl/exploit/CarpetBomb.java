/*
 * Copyright (c) 2022 Coffee Client, 0x150 and contributors.
 * Some rights reserved, refer to LICENSE file.
 */

package coffee.client.feature.module.impl.exploit;

import coffee.client.CoffeeMain;
import coffee.client.feature.config.DoubleSetting;
import coffee.client.feature.config.EnumSetting;
import coffee.client.feature.gui.notifications.Notification;
import coffee.client.feature.module.Module;
import coffee.client.feature.module.ModuleType;
import coffee.client.helper.Rotation;
import coffee.client.helper.event.EventType;
import coffee.client.helper.event.Events;
import coffee.client.helper.event.events.MouseEvent;
import coffee.client.helper.render.Renderer;
import coffee.client.helper.util.Rotations;
import coffee.client.helper.util.Timer;
import coffee.client.helper.util.Utils;
import net.minecraft.client.util.math.MatrixStack;
import net.minecraft.entity.projectile.ProjectileUtil;
import net.minecraft.item.ItemStack;
import net.minecraft.item.Items;
import net.minecraft.nbt.NbtCompound;
import net.minecraft.nbt.NbtDouble;
import net.minecraft.nbt.NbtList;
import net.minecraft.nbt.NbtString;
import net.minecraft.network.packet.c2s.play.CreativeInventoryActionC2SPacket;
import net.minecraft.network.packet.c2s.play.PlayerInteractBlockC2SPacket;
import net.minecraft.util.Hand;
import net.minecraft.util.hit.BlockHitResult;
import net.minecraft.util.hit.EntityHitResult;
import net.minecraft.util.math.BlockPos;
import net.minecraft.util.math.Box;
import net.minecraft.util.math.Direction;
import net.minecraft.util.math.MathHelper;
import net.minecraft.util.math.Quaternion;
import net.minecraft.util.math.Vec3d;
import net.minecraft.world.RaycastContext;

import java.awt.Color;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Objects;

public class CarpetBomb extends Module {
    final EnumSetting<Mode> mode = this.config.create(new EnumSetting.Builder<>(Mode.Focussed).name("Focus mode").description("How to rotate the fireballs").get());
    final DoubleSetting spacing = this.config.create(new DoubleSetting.Builder(2).name("Spacing")
        .description("How far away the fireballs should be")
        .min(0.1)
        .max(10)
        .precision(1)
        .get());
    final DoubleSetting speed = this.config.create(new DoubleSetting.Builder(1).name("Speed")
        .description("Speed of the fired fireball")
        .min(0.01)
        .max(1)
        .precision(3)
        .get());
    final DoubleSetting power = this.config.create(new DoubleSetting.Builder(10).name("Power")
        .description("How powerful the fireballs are gonna be")
        .min(0)
        .max(127)
        .precision(0)
        .get());
    final DoubleSetting spawnDelay = this.config.create(new DoubleSetting.Builder(10).name("Delay")
        .description("How long to wait until spawning another fireball")
        .min(10)
        .max(500)
        .precision(0)
        .get());
    final Timer spawnTimer = new Timer();
    List<Entity> positions = new ArrayList<>();
    net.minecraft.entity.Entity eTarget = null;

    public CarpetBomb() {
        super("CarpetBomb", "Spawns a ton of fireballs where you click", ModuleType.EXPLOIT);
        Events.registerEventHandler(EventType.MOUSE_EVENT, event -> {
            if (!this.isEnabled()) {
                return;
            }
            if (CoffeeMain.client.world == null || CoffeeMain.client.player == null || CoffeeMain.client.currentScreen != null) {
                return;
            }
            MouseEvent me = (MouseEvent) event;
            if (me.getButton() == 0 && me.getAction() == 1) {
                event.setCancelled(true);
                spawn();
            }
        }, 0);
    }

    void spawn() {
        if (mode.getValue() == Mode.Entity) {
            Vec3d goal = Objects.requireNonNull(CoffeeMain.client.player).getRotationVec(1f).multiply(200);
            Box b = CoffeeMain.client.player.getBoundingBox().stretch(goal).expand(1, 1, 1);
            EntityHitResult ehr = ProjectileUtil.raycast(CoffeeMain.client.player,
                CoffeeMain.client.player.getCameraPosVec(0),
                CoffeeMain.client.player.getCameraPosVec(0).add(goal),
                b,
                net.minecraft.entity.Entity::isAttackable,
                200 * 200);
            if (ehr == null) {
                Notification.create(6000, "Error", false, Notification.Type.ERROR, "You aren't looking at an entity");
                return;
            }
            eTarget = ehr.getEntity();
        }
        for (int ox = -10; ox < 11; ox++) {
            for (int oz = -10; oz < 11; oz++) {
                Vec3d off = new Vec3d(ox, oz, 0);
                off = off.multiply(spacing.getValue());
                Vec3d a = Rotations.relativeToAbsolute(Objects.requireNonNull(CoffeeMain.client.player).getCameraPosVec(CoffeeMain.client.getTickDelta()),
                    CoffeeMain.client.player.getRotationClient(),
                    off);
                Vec3d rot = switch (mode.getValue()) {
                    case Relative -> CoffeeMain.client.player.getRotationVector();
                    case Focussed -> {
                        Vec3d root = CoffeeMain.client.player.getCameraPosVec(1);
                        Vec3d rotNormal = CoffeeMain.client.player.getRotationVector();
                        RaycastContext rc = new RaycastContext(root,
                            root.add(rotNormal.multiply(200)),
                            RaycastContext.ShapeType.COLLIDER,
                            RaycastContext.FluidHandling.NONE,
                            CoffeeMain.client.player);
                        BlockHitResult bhr = Objects.requireNonNull(CoffeeMain.client.world).raycast(rc);
                        Rotation real = Rotations.getPitchYawFromOtherEntity(a, bhr.getPos());
                        float f = real.getPitch() * 0.017453292F;
                        float g = -real.getYaw() * 0.017453292F;
                        float h = MathHelper.cos(g);
                        float i = MathHelper.sin(g);
                        float j = MathHelper.cos(f);
                        float k = MathHelper.sin(f);
                        yield new Vec3d(i * j, -k, h * j);
                    }
                    case Entity -> new Vec3d(0, 0, 0);
                };
                Entity e = new Entity(a, rot.normalize().multiply(speed.getValue()));
                positions.add(e);
            }
        }
    }

    @Override
    public void onFastTick() {
        if (!spawnTimer.hasExpired((long) (this.spawnDelay.getValue() + 0))) {
            return;
        }
        spawnTimer.reset();
        List<Entity> positionsCopy = new ArrayList<>(positions);
        if (positionsCopy.isEmpty()) {
            positions.clear();
            return;
        }
        Collections.shuffle(positionsCopy);
        Entity current = positionsCopy.get(0);
        positionsCopy.remove(0);
        Vec3d spawnPos = current.position;
        Vec3d vel = current.velocity;

        if (mode.getValue() == Mode.Entity) {
            if (eTarget == null) {
                positions = positionsCopy;
                return;
            }
            Vec3d t = eTarget.getPos().add(0, eTarget.getHeight() / 2d, 0);
            Rotation real = Rotations.getPitchYawFromOtherEntity(spawnPos, t);
            float f = real.getPitch() * 0.017453292F;
            float g = -real.getYaw() * 0.017453292F;
            float h = MathHelper.cos(g);
            float i = MathHelper.sin(g);
            float j = MathHelper.cos(f);
            float k = MathHelper.sin(f);
            vel = new Vec3d(i * j, -k, h * j).normalize().multiply(speed.getValue());
        }

        ItemStack spawnEgg = new ItemStack(Items.BAT_SPAWN_EGG);
        NbtCompound entityTag = spawnEgg.getOrCreateSubNbt("EntityTag");
        entityTag.put("id", NbtString.of("minecraft:fireball"));
        NbtList pos = new NbtList();
        pos.add(NbtDouble.of(spawnPos.x));
        pos.add(NbtDouble.of(spawnPos.y));
        pos.add(NbtDouble.of(spawnPos.z));
        entityTag.put("Pos", pos);
        NbtList motion = new NbtList();
        motion.add(NbtDouble.of(vel.x));
        motion.add(NbtDouble.of(vel.y));
        motion.add(NbtDouble.of(vel.z));
        entityTag.put("power", motion);
        entityTag.put("ExplosionPower", NbtDouble.of(power.getValue()));
        CreativeInventoryActionC2SPacket set = new CreativeInventoryActionC2SPacket(Utils.Inventory.slotIndexToId(Objects.requireNonNull(CoffeeMain.client.player)
            .getInventory().selectedSlot), spawnEgg);
        CreativeInventoryActionC2SPacket clr = new CreativeInventoryActionC2SPacket(Utils.Inventory.slotIndexToId(CoffeeMain.client.player.getInventory().selectedSlot),
            new ItemStack(Items.AIR));
        BlockHitResult bhr = new BlockHitResult(CoffeeMain.client.player.getPos(), Direction.DOWN, new BlockPos(CoffeeMain.client.player.getPos()), false);
        PlayerInteractBlockC2SPacket put = new PlayerInteractBlockC2SPacket(Hand.MAIN_HAND, bhr, Utils.increaseAndCloseUpdateManager(CoffeeMain.client.world));
        Objects.requireNonNull(CoffeeMain.client.getNetworkHandler()).sendPacket(set);
        CoffeeMain.client.getNetworkHandler().sendPacket(put);
        CoffeeMain.client.getNetworkHandler().sendPacket(clr);
        positions = positionsCopy;
    }

    @Override
    public void tick() {

    }

    @Override
    public void enable() {
        this.positions.clear();
    }

    @Override
    public void disable() {

    }

    @Override
    public String getContext() {
        if (this.positions.isEmpty()) {
            return null;
        }
        return this.positions.size() + "";
    }

    @Override
    public void onWorldRender(MatrixStack matrices) {


        if (mode.getValue() == Mode.Entity && eTarget != null && !positions.isEmpty()) {
            Vec3d t = Renderer.R2D.getScreenSpaceCoordinate(Utils.getInterpolatedEntityPosition(eTarget).add(0, eTarget.getHeight() / 2d, 0), matrices);
            if (Renderer.R2D.isOnScreen(t)) {
                Utils.TickManager.runOnNextRender(() -> {
                    MatrixStack translated = Renderer.R3D.getEmptyMatrixStack();
                    translated.push();
                    translated.translate(t.x, t.y, 0);
                    translated.multiply(new Quaternion(0f, 0f, (System.currentTimeMillis() % 2000) / 2000f * 360f, true));
                    Renderer.R2D.renderQuad(translated, Color.RED, -.5, -10, .5, 10);
                    Renderer.R2D.renderQuad(translated, Color.RED, -10, -.5, 10, .5);
                    translated.pop();
                });
            }
        }
    }

    @Override
    public void onHudRender() {

    }

    public enum Mode {
        Relative, Focussed, Entity
    }

    record Entity(Vec3d position, Vec3d velocity) {
    }
}
