/*
 * Copyright (c) 2022 Coffee Client, 0x150 and contributors.
 * Some rights reserved, refer to LICENSE file.
 */

package coffee.client.feature.module.impl.exploit;

import coffee.client.CoffeeMain;
import coffee.client.feature.config.DoubleSetting;
import coffee.client.feature.config.EnumSetting;
import coffee.client.feature.module.Module;
import coffee.client.feature.module.ModuleType;
import coffee.client.helper.event.EventType;
import coffee.client.helper.event.Events;
import coffee.client.helper.event.events.PacketEvent;
import net.minecraft.client.util.math.MatrixStack;
import net.minecraft.network.Packet;
import net.minecraft.network.packet.c2s.play.KeepAliveC2SPacket;
import net.minecraft.network.packet.c2s.play.PlayPongC2SPacket;

import java.util.ArrayList;
import java.util.List;

public class PingSpoof extends Module {

    final List<PacketEntry> entries = new ArrayList<>();
    final List<Packet<?>> dontRepeat = new ArrayList<>();
    final DoubleSetting delay = this.config.create(new DoubleSetting.Builder(50).name("Delay")
        .description("How much to spoof your ping by")
        .min(0)
        .max(1000)
        .precision(0)
        .get());
    final EnumSetting<Mode> mode = this.config.create(new EnumSetting.Builder<>(Mode.Spoof).name("Mode")
        .description("How to spoof ping. Delay actually delays, Spoof pretends to")
        .get());

    public PingSpoof() {
        super("PingSpoof", "Tells the server you have extreme network lag", ModuleType.EXPLOIT);
        Events.registerEventHandler(EventType.PACKET_SEND, event1 -> {
            if (!this.isEnabled()) {
                return;
            }
            PacketEvent event = (PacketEvent) event1;
            if (!dontRepeat.contains(event.getPacket()) && shouldDelayPacket(event.getPacket())) {
                event.setCancelled(true);
                entries.add(new PacketEntry(event.getPacket(), delay.getValue(), System.currentTimeMillis()));
            } else {
                dontRepeat.remove(event.getPacket());
            }
        }, 0);
    }

    boolean shouldDelayPacket(Packet<?> p) {
        if (mode.getValue() == Mode.Delay) {
            return true; // if we want to delay everything, say yes
        } else {
            return p instanceof PlayPongC2SPacket || p instanceof KeepAliveC2SPacket; // if we want to fake it, say yes if its a pong or keepalive
        }
    }

    @Override
    public void tick() {
    }

    @Override
    public void enable() {
        entries.clear();
        dontRepeat.clear();
    }

    @Override
    public void disable() {

    }

    @Override
    public String getContext() {
        return delay.getValue() + " ms";
    }

    @Override
    public void onWorldRender(MatrixStack matrices) {

    }

    @Override
    public void onHudRender() {

    }

    @Override
    public void onFastTick_NWC() {
        if (CoffeeMain.client.getNetworkHandler() == null) {
            setEnabled(false);
            return;
        }
        long c = System.currentTimeMillis();
        for (PacketEntry entry : entries.toArray(new PacketEntry[0])) {
            if (entry.entryTime + entry.delay <= c) {
                dontRepeat.add(entry.packet);
                entries.remove(entry);
                CoffeeMain.client.getNetworkHandler().sendPacket(entry.packet);
            }
        }
    }

    public enum Mode {
        Delay, Spoof
    }

    record PacketEntry(Packet<?> packet, double delay, long entryTime) {

    }
}
