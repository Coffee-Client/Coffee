/*
 * Copyright (c) 2022 Coffee Client, 0x150 and contributors.
 * Some rights reserved, refer to LICENSE file.
 */

package coffee.client.feature.module.impl.exploit;

import coffee.client.feature.module.Module;
import coffee.client.feature.module.ModuleType;
import coffee.client.helper.event.EventListener;
import coffee.client.helper.event.EventType;
import coffee.client.helper.event.events.PacketEvent;
import coffee.client.helper.util.Utils;
import net.minecraft.client.util.math.MatrixStack;
import net.minecraft.network.packet.c2s.play.ResourcePackStatusC2SPacket;
import net.minecraft.network.packet.s2c.play.ResourcePackSendS2CPacket;
import net.minecraft.text.ClickEvent;
import net.minecraft.text.MutableText;
import net.minecraft.text.Text;

public class ResourcePackSpoof extends Module {
    public ResourcePackSpoof() {
        super("ResourcePackSpoof", "Tells the server you accepted their shitty resource pack", ModuleType.EXPLOIT);
    }


    @EventListener(EventType.PACKET_RECEIVE)
    void onPacketRecv(PacketEvent pe) {
        if (pe.getPacket() instanceof ResourcePackSendS2CPacket pp) {
            Utils.Logging.warn("-- Server just sent custom resource pack! --");
            MutableText urlText = Text.literal(pp.getURL())
                .styled(style -> style.withClickEvent(new ClickEvent(ClickEvent.Action.OPEN_URL, pp.getURL())).withColor(0x3b5fe3));
            Utils.Logging.message(Text.literal("Download: ").append(urlText));
            Utils.Logging.message("Required: " + (pp.isRequired() ? "§cYes" : "§aNo"));
            if (pp.getPrompt() != null) {
                Utils.Logging.message(Text.literal("Custom prompt: ").append(pp.getPrompt()).append("§r"));
            }
            pe.setCancelled(true);
            client.getNetworkHandler().sendPacket(new ResourcePackStatusC2SPacket(ResourcePackStatusC2SPacket.Status.ACCEPTED));
            client.getNetworkHandler().sendPacket(new ResourcePackStatusC2SPacket(ResourcePackStatusC2SPacket.Status.SUCCESSFULLY_LOADED));
        }
    }

    @Override
    public void tick() {

    }

    @Override
    public void enable() {

    }

    @Override
    public void disable() {

    }

    @Override
    public String getContext() {
        return null;
    }

    @Override
    public void onWorldRender(MatrixStack matrices) {

    }

    @Override
    public void onHudRender() {

    }
}
